# simply displays the time in a 'UI' output.
ui <- miniPage(
gadgetTitleBar("Clock"),
miniContentPanel(
uiOutput("time")
)
server <- function(input, output, session) {
# Set some CSS styles for our clock.
clockStyles <- paste(
"border: 1px solid #DADADA",
"background-color: #EFEFEF",
"border-radius: 5px",
"font-size: 6em",
"margin-top: 60px",
"text-align: center",
sep = "; "
)
# We'll use a 'reactiveTimer()' to force Shiny
# to update and show the clock every second.
invalidatePeriodically <- reactiveTimer(intervalMs = 1000)
observe({
# Call our reactive timer in an 'observe' function
# to ensure it's repeatedly fired.
invalidatePeriodically()
# Get the time, and render it as a large paragraph element.
time <- Sys.time()
output$time <- renderUI({
p(style = clockStyles, time)
})
# Listen for 'done' events. When we're finished, we'll
# insert the current time, and then stop the gadget.
observeEvent(input$done, {
timeText <- paste0("\"", as.character(Sys.time()), "\"")
rstudioapi::insertText(timeText)
stopApp()
})
}
# We'll use a pane viwer, and set the minimum height at
# 300px to ensure we get enough screen space to display the clock.
viewer <- paneViewer(200)
runGadget(ui, server, viewer = viewer)
}
# Try running the clock!
clockAddin()
install.packages("slidify")
library (agricolae)# carrega o pacote no ambiente
trt <- c("dose 0.5", "dose 1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(trt, r, serie = 2,  2543)
str(crd1) # verifica a estrutura do objeto
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
m1$trat <- interaction (m1$Mg, m1$rep) # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
?
?interaction
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_") # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep") # cria um código para a combinação repetição e tratamento
matrix (m1$trat, ncol = 4)  # função para gerar matriz
colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
# especifica o separador que vai indicar o número da repetição
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep")
matrix (m1$trat, ncol = 4)  # função para gerar matriz
trt <- c("dose_0.5", "dose_1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(trt, r, serie = 2,  2543)
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
# especifica o separador que vai indicar o número da repetição
m1$trat <- interaction (m1$Mg, m1$rep, sep = "_rep")
matrix (m1$trat, ncol = 4)  # função para gerar matriz
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)  colnames (m1) <- c("code", "Mg", "rep")
# cria um código para a combinação repetição e tratamento
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)  colnames (m1) <- c("code", "Mg", "rep")
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r) colnames (m1) <- c("code", "Mg", "rep")
m1 <- data.frame(crd1$book$plots, crd1$book$trt, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
dose <- c("dose_0.5", "dose_1.5") # níveis do fator
r <- 8            # número de repetições
crd1 <- design.crd(dose, r, serie = 2,  2543)
m1 <- data.frame(crd1$book$plots, crd1$book$dose, crd1$book$r)
colnames (m1) <- c("code", "Mg", "rep")
addinexamples:::reformatAddin()
trt <- c(2,3)
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
trt <- c(2,3)
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4])
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 0)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_rep")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 1)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
fat1 <- design.ab(trt, r = 4, design = "crd", serie = 1)
dat1 <- data.frame(fat1$book$plots, fat1$book$A, fat1$book$B, fat1$book$r)
dat1$plot2 <- interaction(dat1[ ,2:4], sep = "_")
m1 <- matrix(dat1$plot2, ncol=3)
m2 <- as.data.frame(m1)
colnames(m2) <- c("linha 1", "linha 2", "linha 3")
m2
dat1
# parcela principal
hybrids <- c("0F53HX", "30F53YH", "30K64HNSR","30S31H", "30S31YH", "BG7049H", "Dow2B707", "P1630H", "P30F53YH", "P30S31HR", "P32R48H", "P3646H", "STATUS VIP", "STATUS VIP3")
#subparcela
inoculation <- c("silk", "pin")
sp1 <- design.split(hybrids, inoculation,
design="crd", r = 4, serie = 0)
sp1
sp1$book
head(sp1$book, 10)
head(sp1$book, 10) # mostra 10 primeiras parcelas
trt<-c(2,5) # factorial 2x5
rcbd2 <- design.ab(trt, r = 4, design = "rcbd", serie = 2)
matrix(rcbd2$book$trt, ncol = 4)
trt<-c(2,5) # factorial 2x5
rcbd2 <- design.ab(trt, r = 4, design = "rcbd", serie = 2)
matrix(rcbd2$book$trt, ncol = 4)
matrix(rcbd2$book$r, ncol = 4)
rcbd2
head(rcbd2$book, 10)
head(rcbd2$book, 20)
head(rcbd2$book, 15)
devtools::install_github("rstudio/bookdown")
data("InsectSprays")
data(InsectSprays)
insects <- data.frame(InsectSprays)
View(InsectSprays)
View(insects)
View(InsectSprays)
data(InsectSprays)
insects <- data.frame(InsectSprays)
ggplot2::ggplot(insects, aes(spray, count))+
geom_boxplot()
library(ggplot2)
ggplot(insects, aes(spray, count))+
geom_boxplot()
insects <- data.frame(InsectSprays)
?InsectSprays
ggplot(insects, aes(spray, sqrt(count)))+
geom_boxplot()
ggplot(insects, aes(spray, sqrt(count)))+
geom_boxplot()
attach(insects)
hist(residuals(aov(count ~ spray)))
install.packages("easyanova")
library(easyanova)
m1 <- ea1(insects, design=1)
insects2 <- data.frame(spray, count)
m1 <- ea1(insects2, design=1)
m1
insects2 <- data.frame(spray, sqrt(count))
m1 <- ea1(insects2, design=1)
m1
m1$Means
m1$Meansˆ2
m1$Means$mean
(m1$Means$mean)ˆ2
m1$Means$mean*m1$Means$mean
(m1$Means$mean)^2
?scalle_fill_gradient
?scale_fill_gradient
?scale_fill_manual
?scale_fill_discrete
??scale_fill_discrete
library(RColorBrewer)
dat_sad1$sev_quant2 <- with(dat_sad1, reorder(sev_quant, sev_quant, function(x) length(x)))
?datatable
??datatable
?Column
??Column
?tabset
??tabset
install.packages(c("nlme", "stringi", "survival"))
install.packages("ggiraph")
library(ggiraph)
library(GGally)
ggcorr(wine2)
ggcorr(wine2, method = c("pairwise", "pearson"), label=T)
library(ggthemes)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
visreg(fit)
install.packages("visreg")
library(visreg)
visreg(fit)
visreg(fit, "Wind", type = "contrast")
visreg(fit, "Wind", type = "conditional")
airquality$Heat <- cut(airquality$Temp, 3, labels=c("Cool", "Mild", "Hot"))
fit.heat <- lm(Ozone ~ Solar.R + Wind + Heat, data = airquality)
visreg(fit.heat, "Heat", type = "contrast")
visreg(fit.heat, "Heat", type = "conditional")
fit <- lm(Ozone ~ Solar.R + Wind + Temp + I(Wind^2) + I(Temp^2)
+ I(Wind * Temp) + I(Wind*Temp^2) + I(Temp*Wind^2)
+ I(Temp^2 * Wind^2), data = airquality)
fit
visreg2d(fit, "Wind", "Temp", plot.type = "image")
visreg2d(fit, "Wind", "Temp", plot.type = "persp")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("foo.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
sudo tlmgr install framed
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
M = 12
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 24
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
audpc
M = 24
T = 23
audpc = (0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
M = 24
T = 22
(0.2673)*exp(-(0.01275)*(((M -(21.8197))/(0.7532))^2+ ((T-(28.3084))/(2.1423))^2))
0.2673*exp(-0.01275*(((M -21.8197)/0.7532)^2+ ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*((M -21.8197/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 28
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 22
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
0.2873 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 23.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 25
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
M = 24
T = 24.5
0.2673 * exp(-0.01275*(((M -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 24
T = 24.5
0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
LWD = 15
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.0699/0.23
LWD = 24
T = 18
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
0.17/0.23
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
LWD = 24
T = 23.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
LWD = 24
T = 24.5
audpc = 0.2673 * exp(-0.01275*(((LWD -21.8197)/0.7532)^2 + ((T-28.3084)/2.1423)^2))
audpc
library(ggplot)
library(ggplot2)
?scale_color_grey
log(0.05)
ln(0.05)
log10(0.05)
?log
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
setwd("~/Documents/github/sadbank")
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
# Reading the data
dat_sad <- read_csv ("dat_sad.csv")
attach(dat_sad)
dat_sad$citation <- paste(author, pub_year)
dat_sad$study_diag <- with(dat_sad, interaction(study, diag_id))
dat_sad$citation_diag <- with(dat_sad, interaction(citation, diag_id))
detach(dat_sad)
# Chunk 1
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
# Chunk 1
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
# Chunk 2
# Reading the data
dat_sad <- read_csv ("dat_sad.csv")
attach(dat_sad)
dat_sad$citation <- paste(author, pub_year)
dat_sad$study_diag <- with(dat_sad, interaction(study, diag_id))
dat_sad$citation_diag <- with(dat_sad, interaction(citation, diag_id))
detach(dat_sad)
# aggregate by individidual studies
dat_sad <- group_by(dat_sad, study)
dat_sad1 <- filter(dat_sad, row_number()==1 )
# Chunk 1
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
# Chunk 2
# Reading the data
dat_sad <- read_csv ("dat_sad.csv")
attach(dat_sad)
dat_sad$citation <- paste(author, pub_year)
dat_sad$study_diag <- with(dat_sad, interaction(study, diag_id))
dat_sad$citation_diag <- with(dat_sad, interaction(citation, diag_id))
detach(dat_sad)
# aggregate by individidual studies
dat_sad <- group_by(dat_sad, study)
dat_sad1 <- filter(dat_sad, row_number()==1 )
# Chunk 3
dat_sad2 <- ungroup(dat_sad1)
table1 <- select(dat_sad2, pub_year, crop, pathogen, pathogen_group, journal, country, lang, pub_type, citation, link1, link, link2)
table1 <- arrange(table1, -pub_year)
table1 <- unite(table1, weblink, link1, link, link2, sep = "")
(gg <- ggplotly(g_artigos))
g_artigos
# Chunk 1
library(ggplot2)
library(plotly)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
# Chunk 2
# Reading the data
dat_sad <- read_csv ("dat_sad.csv")
attach(dat_sad)
dat_sad$citation <- paste(author, pub_year)
dat_sad$study_diag <- with(dat_sad, interaction(study, diag_id))
dat_sad$citation_diag <- with(dat_sad, interaction(citation, diag_id))
detach(dat_sad)
# aggregate by individidual studies
dat_sad <- group_by(dat_sad, study)
dat_sad1 <- filter(dat_sad, row_number()==1 )
# Chunk 3
dat_sad2 <- ungroup(dat_sad1)
table1 <- select(dat_sad2, pub_year, crop, pathogen, pathogen_group, journal, country, lang, pub_type, citation, link1, link, link2)
table1 <- arrange(table1, -pub_year)
table1 <- unite(table1, weblink, link1, link, link2, sep = "")
n_dev <- subset(dat_sad2, n_dev <1000, select = n_dev)
g_nsamples <- ggplot(n_dev, aes(x=n_dev))+
geom_histogram(binwidth=50, color = "white", fill = "#21908d")+
labs(x = "Number of samples", y = "Frequency")+
scale_x_continuous(breaks=c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500))+
theme_minimal()
(gg <- ggplotly(g_nsamples, tooltip = c("count")))
g_artigos <- ggplot(dat_sad1, aes(factor(pub_year), fill=lang))+ geom_bar() +
scale_y_continuous(breaks=seq(0, 12, 1), expand=c(0.02, 0))+
xlab("Year")+ ylab("Number of articles")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position="right")+
scale_fill_viridis(discrete=TRUE)+
labs(fill = "Language")
(gg <- ggplotly(g_artigos))
g_maxsev <- ggplot(dat_sad2, aes(x=max_sev))+
geom_histogram(fill = "#21908d", color = "white")+
xlab("Maximum severity (%)")+
ylab("Frequency")+
scale_x_continuous(breaks=c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ))+
theme_minimal()
(gg <- ggplotly(g_maxsev, tooltip = c("count")))
library(plotly)
df <- read.csv('country.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = TRUE)
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '') %>%
layout(title = '<br>Country of the authorship of studies</br> on the development and validation of SADs',
geo = g)
g
View(df)
l <- list(color = toRGB("grey"), width = 0.5)
g <- list(
showframe = FALSE,
showcoastlines = TRUE)
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '') %>%
layout(title = '<br>Country of the authorship of studies</br> on the development and validation of SADs',
geo = g)
library(magrittr)
library(plotly)
df <- read.csv('country.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = TRUE)
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '') %>%
layout(title = '<br>Country of the authorship of studies</br> on the development and validation of SADs',
geo = g)
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '')
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '')
plot_ly(df, z = SAD, text = COUNTRY, locations = CODE, type = 'choropleth', showscale = FALSE,
color = SAD, colors = c("white", "#21908d"), marker = list(line = l), title = '')
layout(title = '<br>Country of the authorship of studies</br> on the development and validation of SADs',
geo = g)
library(magrittr)
library(DT)
datatable(table1,
escape = FALSE,
class = 'cell-border stripe',
rownames = FALSE, colnames = c('Publication year','Crop', 'Pathogen', 'Pathogen group', 'Journal', 'Country', 'Language', 'Publication type',  'Reference', 'Link'),
options = list(
pageLength = 25,
fontSize = 12,
lengthMenu = c(10, 25, 50, 100 )
))%>%
formatStyle(
c('crop', 'pathogen', 'pathogen_group', 'pub_year','journal', 'country', 'lang', 'pub_type', 'citation', 'weblink'),
fontSize = '90%')
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
devtools::install_github("hadley/ggplot2")
detach("package:ggplot2", unload=TRUE)
detach("package:plotly", unload=TRUE)
devtools::install_github("hadley/ggplot2")
devtools::install_github("hadley/ggplot2", force=TRUE)
no
